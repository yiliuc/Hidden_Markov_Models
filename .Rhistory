max2sb <- numeric(length(covariate_names))
for(i in seq_along(covariate_names)) {
p_name <- covariate_names[i]
# max over the absolute SB for (1,2), (1,3), (2,3)
max2sb[i] <- max(
abs_sb_12[p_name],
abs_sb_13[p_name],
abs_sb_23[p_name],
na.rm = TRUE
)
}
mean_max2sb <- mean(max2sb, na.rm = TRUE)
## 5) Also compute ATE(1,2) and ATE(1,3) from the *matched data*
#    using your provided IPW approach.
ate_12_list <- calc_ate_ipw(
data    = final_cohort_1_2,
t1      = 1,
t2      = 2,
y_col   = "Y",
trt_col = "Treatment",
ps_cols = c("PS1","PS2","PS3")
)
ate_13_list <- calc_ate_ipw(
data    = final_cohort_1_3,
t1      = 1,
t2      = 3,
y_col   = "Y",
trt_col = "Treatment",
ps_cols = c("PS1","PS2","PS3")
)
# We'll return just the numerical ATE from each
ate_12 <- ate_12_list$ATE_t1_t2
ate_13 <- ate_13_list$ATE_t1_t2
## 6) Return everything in a list
return(list(
max2sb = mean_max2sb,
ate_12 = ate_12,
ate_13 = ate_13
))
}
###############################################################################
# (D)  Finally, run B simulations and collect the results for each matching method
run_simulations <- function(B = 1000, n = 3000, K = 3) {
# We'll collect results for each method in separate vectors
# For M1
results_M1_max2sb  <- numeric(B)
results_M1_ate12   <- numeric(B)
results_M1_ate13   <- numeric(B)
# For M2
results_M2_max2sb  <- numeric(B)
results_M2_ate12   <- numeric(B)
results_M2_ate13   <- numeric(B)
# For VM_MD
results_VM_MD_max2sb <- numeric(B)
results_VM_MD_ate12  <- numeric(B)
results_VM_MD_ate13  <- numeric(B)
# If you want VM_MDnc, you'd do the same pattern:
# results_VM_MDnc_max2sb <- ...
# results_VM_MDnc_ate12  <- ...
# results_VM_MDnc_ate13  <- ...
for (b in seq_len(B)) {
seed_b <- 123 + b  # optional, for reproducibility
# --- M1 ---
sim_M1  <- one_simulation(
n = n, K = K,
matching_method  = "M1",
seed            = seed_b
)
# sim_M1 is a list with $max2sb, $ate_12, $ate_13
results_M1_max2sb[b] <- sim_M1$max2sb
results_M1_ate12[b]  <- sim_M1$ate_12
results_M1_ate13[b]  <- sim_M1$ate_13
# --- M2 ---
sim_M2 <- one_simulation(
n = n, K = K,
matching_method  = "M2",
seed            = seed_b
)
results_M2_max2sb[b] <- sim_M2$max2sb
results_M2_ate12[b]  <- sim_M2$ate_12
results_M2_ate13[b]  <- sim_M2$ate_13
# --- VM_MD ---
sim_VM <- one_simulation(
n = n, K = K,
matching_method  = "VM_MD",
seed            = seed_b
)
results_VM_MD_max2sb[b] <- sim_VM$max2sb
results_VM_MD_ate12[b]  <- sim_VM$ate_12
results_VM_MD_ate13[b]  <- sim_VM$ate_13
# If you want VM_MDnc also, do a 4th call similarly
if (b %% 50 == 0) {
cat("Finished iteration:", b, "of", B, "\n")
}
}
# Finally, return them in an organized list:
return(list(
M1 = list(
max2sb  = results_M1_max2sb,
ate_12  = results_M1_ate12,
ate_13  = results_M1_ate13
),
M2 = list(
max2sb  = results_M2_max2sb,
ate_12  = results_M2_ate12,
ate_13  = results_M2_ate13
),
VM_MD = list(
max2sb  = results_VM_MD_max2sb,
ate_12  = results_VM_MD_ate12,
ate_13  = results_VM_MD_ate13
)
# If wanted:
# VM_MDnc = list(...)
))
}
system.time({
sim_results <- run_simulations(B=200, n=3000, K=3)
})
max2sb <- data.frame(M1 = sim_results$M1$max2sb,
M2 = sim_results$M1$max2sb,
VM_MD = sim_results$VM_MD$max2sb)
boxplot(max2sb,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
max2sb <- data.frame(M1 = sim_results$M1$max2sb,
M2 = sim_results$M2$max2sb,
VM_MD = sim_results$VM_MD$max2sb)
boxplot(max2sb,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
max2sb <- data.frame(M1 = sim_results$M1$max2sb,
M2 = sim_results$M2$max2sb,
VM_MD = sim_results$VM_MD$max2sb)
ATE_12 <- data.frame(M1 = sim_results$M1$ate_12,
M2 = sim_results$M2$ate_12,
VM_MD = sim_results$VM_MD$ate_12)
ATE_13 <- data.frame(M1 = sim_results$M1$ate_13,
M2 = sim_results$M2$ate_13,
VM_MD = sim_results$VM_MD$ate_13)
boxplot(max2sb,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_12,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_13,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
max2sb <- data.frame(M1 = sim_results$M1$max2sb,
M2 = sim_results$M2$max2sb,
VM_MD = sim_results$VM_MD$max2sb)
ATE_12 <- data.frame(M1 = sim_results$M1$ate_12,
M2 = sim_results$M2$ate_12,
VM_MD = sim_results$VM_MD$ate_12)
ATE_13 <- data.frame(M1 = sim_results$M1$ate_13,
M2 = sim_results$M2$ate_13,
VM_MD = sim_results$VM_MD$ate_13)
boxplot(max2sb,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_12,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_13,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
one_simulation <- function(
n                = 3000,
K                = 3,
matching_method  = c("M1", "M2", "VM_MD"),
epsilon          = 0.2,
n_match          = 2,     # used only for "M2"
seed             = NULL,
covariates_for_SB = c("X1","X2","X3","X4")
) {
if(!is.null(seed)) set.seed(seed)
## 1) Simulate data
data <- simulate_multitreatment_data(n = n)
## 2) Estimate PS & drop out-of-support
ps <- estimate_propensity_scores(data)
ps_trt <- as.data.frame(cbind(ps, Treatment = data$Treatment))
css <- common_support(ps_trt, "Treatment")
valid_index <- filter_valid_subjects_indices(ps, css)
valid_data  <- data[valid_index,]
ps_new <- estimate_propensity_scores(valid_data)
valid_data_ps <- cbind(valid_data, ps_new)
## 3) For each pair of treatments (1 vs 2), (1 vs 3), (2 vs 3):
##    (a) KMC => cluster assignments
##    (b) call the chosen matching function => matched pairs
##    (c) build final matched cohort => compute standardized biases
# Helper: choose the correct matching function
run_matching_func <- function(method, data_input, ref_t, t_prime_t) {
if (method == "M1") {
out <- perform_matching(
data          = data_input,
ref_treatment = ref_t,
t_prime       = t_prime_t,
epsilon       = epsilon
)
} else if (method == "M2") {
out <- perform_matching_2(
data          = data_input,
ref_treatment = ref_t,
t_prime       = t_prime_t,
epsilon       = epsilon,
n_match       = n_match
)
} else if (method == "VM_MD") {
out <- perform_matching_vm_md(
data          = data_input,
ref_treatment = ref_t,
t_prime       = t_prime_t,
epsilon       = epsilon
)
} else if (method == "VM_MDnc") {
out <- perform_matching_vm_mdnc(
data          = data_input,
ref_treatment = ref_t,
t_prime       = t_prime_t
)
} else {
stop("Unrecognized matching method!")
}
return(out)
}
###########
# Pair (1 vs 2)
kmc_12 <- perform_kmc(
ps_data       = ps_new,
ref_treatment = "PS1",
t_prime       = "PS2",
K             = K
)
valid_data_ps_12 <- cbind(valid_data_ps, Cluster = kmc_12$clusters)
matches_1_2 <- run_matching_func(matching_method, valid_data_ps_12, ref_t=1, t_prime=2)
final_cohort_1_2 <- data.frame(
id   = c(rbind(matches_1_2$id_ref, matches_1_2$id_t_prime)),
t    = c(rbind(matches_1_2$t_ref,  matches_1_2$t_prime )),
pair = rep(seq_len(nrow(matches_1_2)), each = 2)
)
final_cohort_1_2 <- dplyr::left_join(
final_cohort_1_2,
valid_data_ps,
by = c("id", "t" = "Treatment")
) %>%
dplyr::rename(Treatment = t)
abs_sb_12 <- calc_standardized_bias(
data         = final_cohort_1_2,
covariates   = covariates_for_SB,
ref_treatment = 1
)
###########
# Pair (1 vs 3)
kmc_13 <- perform_kmc(
ps_data       = ps_new,
ref_treatment = "PS1",
t_prime       = "PS3",
K             = K
)
valid_data_ps_13 <- cbind(valid_data_ps, Cluster = kmc_13$clusters)
matches_1_3 <- run_matching_func(matching_method, valid_data_ps_13, ref_t=1, t_prime=3)
final_cohort_1_3 <- data.frame(
id   = c(rbind(matches_1_3$id_ref, matches_1_3$id_t_prime)),
t    = c(rbind(matches_1_3$t_ref,  matches_1_3$t_prime )),
pair = rep(seq_len(nrow(matches_1_3)), each = 2)
)
final_cohort_1_3 <- dplyr::left_join(
final_cohort_1_3,
valid_data_ps,
by = c("id", "t" = "Treatment")
) %>%
dplyr::rename(Treatment = t)
abs_sb_13 <- calc_standardized_bias(
data         = final_cohort_1_3,
covariates   = covariates_for_SB,
ref_treatment = 1
)
###########
# Pair (2 vs 3)
kmc_23 <- perform_kmc(
ps_data       = ps_new,
ref_treatment = "PS2",
t_prime       = "PS3",
K             = K
)
valid_data_ps_23 <- cbind(valid_data_ps, Cluster = kmc_23$clusters)
matches_2_3 <- run_matching_func(matching_method, valid_data_ps_23, ref_t=2, t_prime=3)
final_cohort_2_3 <- data.frame(
id   = c(rbind(matches_2_3$id_ref, matches_2_3$id_t_prime)),
t    = c(rbind(matches_2_3$t_ref,  matches_2_3$t_prime )),
pair = rep(seq_len(nrow(matches_2_3)), each = 2)
)
final_cohort_2_3 <- dplyr::left_join(
final_cohort_2_3,
valid_data_ps,
by = c("id", "t" = "Treatment")
) %>%
dplyr::rename(Treatment = t)
abs_sb_23 <- calc_standardized_bias(
data         = final_cohort_2_3,
covariates   = covariates_for_SB,
ref_treatment = 2
)
## 4) Combine the standardized biases
stopifnot(all(names(abs_sb_12) == names(abs_sb_13)))
stopifnot(all(names(abs_sb_12) == names(abs_sb_23)))
covariate_names <- names(abs_sb_12)
max2sb <- numeric(length(covariate_names))
for(i in seq_along(covariate_names)) {
p_name <- covariate_names[i]
# max over the absolute SB for (1,2), (1,3), (2,3)
max2sb[i] <- max(
abs_sb_12[p_name],
abs_sb_13[p_name],
abs_sb_23[p_name],
na.rm = TRUE
)
}
mean_max2sb <- mean(max2sb, na.rm = TRUE)
## 5) Also compute ATE(1,2) and ATE(1,3) from the *matched data*
#    using your provided IPW approach.
ate_12_list <- calc_ate_ipw(
data    = final_cohort_1_2,
t1      = 1,
t2      = 2,
y_col   = "Y",
trt_col = "Treatment",
ps_cols = c("PS1","PS2","PS3")
)
ate_13_list <- calc_ate_ipw(
data    = final_cohort_1_3,
t1      = 1,
t2      = 3,
y_col   = "Y",
trt_col = "Treatment",
ps_cols = c("PS1","PS2","PS3")
)
# We'll return just the numerical ATE from each
ate_12 <- ate_12_list$ATE_t1_t2
ate_13 <- ate_13_list$ATE_t1_t2
# 6) Compute matching rate:
#    A subject is considered matched if it appears in either final_cohort_1_2 or final_cohort_1_3.
#    The total sample size was n=3000, so:
matched_ids_12 <- unique(final_cohort_1_2$id)
matched_ids_13 <- unique(final_cohort_1_3$id)
matched_union  <- union(matched_ids_12, matched_ids_13)
matching_rate  <- length(matched_union) / n  # proportion matched
## Return everything in a list
return(list(
max2sb = mean_max2sb,
ate_12 = ate_12,
ate_13 = ate_13,
matching_rate = matching_rate
))
}
run_simulations <- function(B = 1000, n = 3000, K = 3) {
# For M1
results_M1_max2sb  <- numeric(B)
results_M1_ate12   <- numeric(B)
results_M1_ate13   <- numeric(B)
results_M1_matchrate <- numeric(B)
# For M2
results_M2_max2sb  <- numeric(B)
results_M2_ate12   <- numeric(B)
results_M2_ate13   <- numeric(B)
results_M2_matchrate <- numeric(B)
# For VM_MD
results_VM_MD_max2sb  <- numeric(B)
results_VM_MD_ate12   <- numeric(B)
results_VM_MD_ate13   <- numeric(B)
results_VM_MD_matchrate <- numeric(B)
for (b in seq_len(B)) {
seed_b <- 123 + b  # optional for reproducibility
# --- M1 ---
sim_M1 <- one_simulation(
n = n, K = K,
matching_method  = "M1",
seed            = seed_b
)
results_M1_max2sb[b]   <- sim_M1$max2sb
results_M1_ate12[b]    <- sim_M1$ate_12
results_M1_ate13[b]    <- sim_M1$ate_13
results_M1_matchrate[b]<- sim_M1$matching_rate
# --- M2 ---
sim_M2 <- one_simulation(
n = n, K = K,
matching_method  = "M2",
seed            = seed_b
)
results_M2_max2sb[b]   <- sim_M2$max2sb
results_M2_ate12[b]    <- sim_M2$ate_12
results_M2_ate13[b]    <- sim_M2$ate_13
results_M2_matchrate[b]<- sim_M2$matching_rate
# --- VM_MD ---
sim_VM <- one_simulation(
n = n, K = K,
matching_method  = "VM_MD",
seed            = seed_b
)
results_VM_MD_max2sb[b]   <- sim_VM$max2sb
results_VM_MD_ate12[b]    <- sim_VM$ate_12
results_VM_MD_ate13[b]    <- sim_VM$ate_13
results_VM_MD_matchrate[b]<- sim_VM$matching_rate
if (b %% 50 == 0) {
cat("Finished iteration:", b, "of", B, "\n")
}
}
return(list(
M1 = list(
max2sb     = results_M1_max2sb,
ate_12     = results_M1_ate12,
ate_13     = results_M1_ate13,
match_rate = results_M1_matchrate
),
M2 = list(
max2sb     = results_M2_max2sb,
ate_12     = results_M2_ate12,
ate_13     = results_M2_ate13,
match_rate = results_M2_matchrate
),
VM_MD = list(
max2sb     = results_VM_MD_max2sb,
ate_12     = results_VM_MD_ate12,
ate_13     = results_VM_MD_ate13,
match_rate = results_VM_MD_matchrate
)
))
}
sim_results <- run_simulations(B=200, n=3000, K=3)
max2sb <- data.frame(M1 = sim_results$M1$max2sb,
M2 = sim_results$M2$max2sb,
VM_MD = sim_results$VM_MD$max2sb)
ATE_12 <- data.frame(M1 = sim_results$M1$ate_12,
M2 = sim_results$M2$ate_12,
VM_MD = sim_results$VM_MD$ate_12)
ATE_13 <- data.frame(M1 = sim_results$M1$ate_13,
M2 = sim_results$M2$ate_13,
VM_MD = sim_results$VM_MD$ate_13)
match_rate <- data.frame(M1 = sim_results$M1$match_rate,
M2 = sim_results$M2$match_rate,
VM_MD = sim_results$VM_MD$match_rate)
boxplot(max2sb,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_12,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_13,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(match_rate,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
sim_results <- run_simulations(B=200, n=5000, K=3)
max2sb <- data.frame(M1 = sim_results$M1$max2sb,
M2 = sim_results$M2$max2sb,
VM_MD = sim_results$VM_MD$max2sb)
ATE_12 <- data.frame(M1 = sim_results$M1$ate_12,
M2 = sim_results$M2$ate_12,
VM_MD = sim_results$VM_MD$ate_12)
ATE_13 <- data.frame(M1 = sim_results$M1$ate_13,
M2 = sim_results$M2$ate_13,
VM_MD = sim_results$VM_MD$ate_13)
match_rate <- data.frame(M1 = sim_results$M1$match_rate,
M2 = sim_results$M2$match_rate,
VM_MD = sim_results$VM_MD$match_rate)
boxplot(max2sb,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_12,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(ATE_13,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
boxplot(match_rate,
main = "Boxplot of Three Vectors",
ylab = "Values",
xlab = "Groups",
col = c("lightblue", "lightgreen", "lightpink"))
setwd("/Users/caoyiliu/Desktop/UW/STAT929/Final_Project")
